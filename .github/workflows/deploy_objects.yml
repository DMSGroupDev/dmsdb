# This is a basic workflow to help you get started with Actions

name: Deploy objects to database

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ devdeploy ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
env:
  BRANCH_NAME: echo $GITHUB_REF | cut -d/ -f3
  DEFAULT_CHEMA: ${{ secrets.DEFAULT_SCHEMA }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v2
      - name: Test migration in Docker
        uses: joshuaavalon/flyway-action@v1
        with:
          url: jdbc:postgresql://postgres:5432/postgres
          user: postgres
          password: postgres
      
      - name: Download na copy Flyway
        run: wget -qO- https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/8.0.2/flyway-commandline-8.0.2-linux-x64.tar.gz | tar xz && sudo ln -s `pwd`/flyway-8.0.2/flyway /usr/local/bin 
      
      - name: Flyway version
        run: flyway -v

      - name: DEFAULT_SCHEMA
        run: echo ${{ secrets.FLYWAY_DEFAULT_SCHEMA }} > /tmp/ulozto.txt 
        
      - name: precti
        run: cat /tmp/ulozto.txt

      - name: Flyway validate
        run: flyway -url="jdbc:postgresql://${{ secrets.SERVER }}:5432/${{ secrets.DATABASE }}" -user="${{ secrets.USERNAME }}" -password="${{ secrets.PASSWORD }}" -defaultSchema="${{ secrets.FLYWAY_DEFAULT_SCHEMA }}" -schemas="${{ secrets.SCHEMAS }}" migrate 
              
#      - uses: actions/checkout@v2
#      - uses: joshuaavalon/flyway-action@v1
#        env:
#          DATABASE_URL: 'jdbc:postgres:${{ secrets.DATABASE_URI }}'
#          FLYWAY_DEFAULT_SCHEMA: '${{ secrets.SCHEMA }}'
#          FLYWAY_SCHEMAS: '${{ secrets.SCHEMAS }}'
#        with:
#          url: 'jdbc:postgresql://${{ secrets.SERVER }}:5432/${{ secrets.DATABASE }}'
#          user: ${{ secrets.USERNAME }}
#          password: ${{ secrets.PASSWORD }}
#      - run: echo 'Real'


#      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#      - uses: actions/checkout@v2

      # Runs a set of commands using the runners shell
#      - name: Run a multi-line script
#        run: |
#          echo Add other actions to build,
#          echo test, and deploy your project.
#          echo ${{ env.USERNAME }}
#          echo ${{ env.PASSWORD }}
#          export

#      # Runs a single command using the runners shell
#      - name: Connect to DB
#        run: |
#          psql ${{ env.DATABASE_URL }} -c "SELECT * FROM pg_catalog.pg_tables WHERE schemaname != 'pg_catalog' AND schemaname != 'information_schema'";


